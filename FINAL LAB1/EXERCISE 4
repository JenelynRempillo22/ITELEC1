package com.firstapp.myapplication

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.firstapp.myapplication.ui.theme.MyApplicationTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApplicationTheme {
                ButtonExercise()
            }
        }
    }
}

@Composable
fun ButtonExercise() {
    val context = LocalContext.current
    var isToggled by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        // Step 1: Standard Button
        Button(onClick = {
            Toast.makeText(context, "Standard Button Clicked!", Toast.LENGTH_SHORT).show()
        }) {
            Text(text = stringResource(id = R.string.standard_button))
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Step 2: Image Button
        IconButton(onClick = {
            Toast.makeText(context, "Image Button Clicked!", Toast.LENGTH_SHORT).show()
        }) {
            Image(
                painter = painterResource(id = R.drawable.ic_launcher_foreground),
                contentDescription = stringResource(id = R.string.image_button)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Step 3: Toggle Button
        Button(
            onClick = {
                isToggled = !isToggled
                val message = if (isToggled) "Toggle is ON" else "Toggle is OFF"
                Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
            },
            colors = ButtonDefaults.buttonColors(
                containerColor = if (isToggled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary
            )
        ) {
            Text(text = if (isToggled) stringResource(id = R.string.toggle_on) else stringResource(id = R.string.toggle_off))
        }
    }
}

